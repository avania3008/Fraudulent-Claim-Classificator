summary(ms)
str(raw.train)
vc <- as.factor(raw.train$vehicle_color)
mode(vc)
?mode
#fill NA values
getmode <- function(x){
u <- unique(x)
u[which.max(tabulate(match(x, u)))]
}
getmode(vc)
getmode(ms)
#fill NA values
getmode <- function(x){
u <- unique(x)
u[which.max(tabulate(match(x, u)))]
return(u)
}
getmode(ms)
#fill NA values
getmode <- function(x){
u <- unique(x)
m <- u[which.max(tabulate(match(x, u)))]
return(m)
}
getmode(ms)
ms
summary(ms)
getmode(ms)
raw.train[2426,"marital_status"] <- getmode(raw.train$marital_status)
raw.train[2426,"marital_status"]
library(dplyr)
library(tidyr)
library(corrplot)
library(stringr)
library(ggplot2)
library(caret)
library(outliers)
library(reshape2)
library(lattice)
raw.train <- read.csv("data/training.csv", sep = ",", header = T)
raw.test <- read.csv("data/test_2021.csv", sep = ",", header = T)
summary(is.na(raw.train)) #marital_status, claim_est_payout, age_of_vehicle
summary(is.na(raw.test)) #claim_est_payout, age_of_vehicle
str(raw.train)
str(raw.test)
#get mode function
getmode <- function(x){
u <- unique(x)
m <- u[which.max(tabulate(match(x, u)))]
return(m)
}
impute_convert <- function(dataset){
len <- length(levels(factor(dataset[[i]])))
for(i in 1:ncol(dataset)){
if(class(dataset[[i]]) == "character" || len <= 5){
#convert char ke factor
dataset[[i]] <- as.factor(dataset[[i]])
#kalau ada missing value
if(sum(is.na(dataset[[i]])) > 0){
na.cond <- which(is.na(dataset[[i]]))
na.rows <- as.numeric(rownames(dataset[na.cond,]))
dataset[na.rows,i] <- getmode(dataset[[i]])
}
} else { #data numeric
if(sum(is.na(dataset[[i]])) > 0){
na.cond <- which(is.na(dataset[[i]]))
na.rows <- as.numeric(rownames(dataset[na.cond,]))
dataset[na.rows,i] <- median(dataset[[i]])
}
}
}
}
train <- impute_convert(raw.train)
impute_convert <- function(dataset){
for(i in 1:ncol(dataset)){
len <- length(levels(factor(dataset[[i]])))
if(class(dataset[[i]]) == "character" || len <= 5){
#convert char ke factor
dataset[[i]] <- as.factor(dataset[[i]])
#kalau ada missing value
if(sum(is.na(dataset[[i]])) > 0){
na.cond <- which(is.na(dataset[[i]]))
na.rows <- as.numeric(rownames(dataset[na.cond,]))
dataset[na.rows,i] <- getmode(dataset[[i]])
}
} else { #data numeric
if(sum(is.na(dataset[[i]])) > 0){
na.cond <- which(is.na(dataset[[i]]))
na.rows <- as.numeric(rownames(dataset[na.cond,]))
dataset[na.rows,i] <- median(dataset[[i]])
}
}
}
}
train <- impute_convert(raw.train)
summary(is.na(train))
str(train)
impute_convert <- function(dataset){
for(i in 1:ncol(dataset)){
len <- length(levels(factor(dataset[[i]])))
if(class(dataset[[i]]) == "character" || len <= 5){
#convert char ke factor
dataset[[i]] <- as.factor(dataset[[i]])
#kalau ada missing value
if(sum(is.na(dataset[[i]])) > 0){
na.cond <- which(is.na(dataset[[i]]))
na.rows <- as.numeric(rownames(dataset[na.cond,]))
dataset[na.rows,i] <- getmode(dataset[[i]])
}
} else { #data numeric
if(sum(is.na(dataset[[i]])) > 0){
na.cond <- which(is.na(dataset[[i]]))
na.rows <- as.numeric(rownames(dataset[na.cond,]))
dataset[na.rows,i] <- median(dataset[[i]])
}
}
}
return(dataset)
}
train <- impute_convert(raw.train)
summary(is.na(train))
str(train)
str(train)
summary(is.na(train))
str(train)
mean(raw.train$claim_est_payout)
mean(as.integer(raw.train$claim_est_payout))
class(raw.train$claim_est_payout)
mean(raw.train$claim_est_payout, na.rm = T)
raw.train <- read.csv("data/training.csv", sep = ",", header = T)
raw.test <- read.csv("data/test_2021.csv", sep = ",", header = T)
#missing values (train & test) : marital_status, witness_present_ind, claim_est_payout, age_of_vehicle
summary(is.na(raw.train))
summary(is.na(raw.test))
#get mode function
getmode <- function(x){
u <- unique(x)
m <- u[which.max(tabulate(match(x, u)))]
return(m)
}
impute_convert <- function(dataset){
for(i in 1:ncol(dataset)){
len <- length(levels(factor(dataset[[i]])))
if(class(dataset[[i]]) == "character" || len <= 5){
#convert char ke factor
dataset[[i]] <- as.factor(dataset[[i]])
#kalau ada missing value
if(sum(is.na(dataset[[i]])) > 0){
na.cond <- which(is.na(dataset[[i]]))
na.rows <- as.numeric(rownames(dataset[na.cond,]))
dataset[na.rows,i] <- getmode(dataset[[i]])
}
} else { #data numeric
if(sum(is.na(dataset[[i]])) > 0){
na.cond <- which(is.na(dataset[[i]]))
na.rows <- as.numeric(rownames(dataset[na.cond,]))
dataset[na.rows,i] <- median(dataset[[i]], na.rm = T)
}
}
}
return(dataset)
}
train <- impute_convert(raw.train)
summary(is.na(train))
str(train)
test <- impute_convert(raw.test)
summary(is.na(test))
str(test)
str(train)
#cek keseimbangan target values di data train
summary(train$fraud)
prop.table(table(train$fraud))
#tabel summary statistics
#1. Data Train
#a. Numeric
tr.num <- unlist(lapply(train, is.numeric))
sum.num.train <- do.call(cbind, lapply(train[,tr.num], summary))
summ.num.train.df <- as.data.frame(round(t(sum.num.train),2))
sum.num.train.df <- as.data.frame(round(t(sum.num.train),2))
View(sum.num.train.df)
#ubah zip code ke factor
train$zip_code <- as.factor(train$zip_code)
str(train)
#ubah zip code ke factor
train$zip_code <- as.factor(train$zip_code)
test$zip_code <- as.factor(test$zip_code)
#cek keseimbangan target values di data train
summary(train$fraud)
prop.table(table(train$fraud))
#tabel summary statistics
#1. Data Train
#a. Numeric
tr.num <- unlist(lapply(train, is.numeric))
sum.num.train <- do.call(cbind, lapply(train[,tr.num], summary))
sum.num.train.df <- as.data.frame(round(t(sum.num.train),2))
View(sum.num.train.df)
#b. Categoric
categorical <- function(feature){
return(list("Number of Levels" = nlevels(feature),
"Levels" = levels(feature),
"Levels' Count" = summary(feature)))
}
concat <- function(vector){
result <- vector[1]
for(i in 2:length(vector)){
result <- paste(result,vector[i],sep = ",\n")
}
return(result)
}
tr.cat <- unlist(lapply(train, is.factor))
sum.cat.train <- do.call(rbind, lapply(train[,tr.cat], categorical))
sum.cat.train.df <- as.data.frame(sum.cat.train)
View(sum.cat.train.df)
tidy_levels <- function(df){
for(i in 1:nrow(df)){
for(j in 2:3){
df[i,j] <- concat(unlist(df[i,j]))
}
}
return(df)
}
tr.cat <- unlist(lapply(train, is.factor))
sum.cat.train <- do.call(rbind, lapply(train[,tr.cat], categorical))
sum.cat.train.df <- tidy_levels(as.data.frame(sum.cat.train))
View(sum.cat.train.df)
View(sum.cat.train.df)
str(train)
#drop columns yg tidak diperlukan : zip_code, claim_date
c.train <- subset(train, select = -c(zip_code, claim_date))
c.test <- subset(test, select = -c(zip_code, claim_date))
str(c.train)
#cek outliers dengan cook's distance
model <- glm(fraud ~ ., data = c.train, family = "binomial")
cooksd <- cooks.distance(model)
plot(cooksd, pch = "*", col = "black", cex = 2,
main = "Influential Obs by Cooks Distance")
#garis pembatas
abline(h = 4*mean(cooksd, na.rm = T), col = "red")
text(x = 1:length(cooksd)+1, y = cooksd, labels = ifelse(cooksd>4*mean(cooksd,na.rm=T), names(cooksd),""), col="red")
#cek outliers
#row data yg outlier
outliers <- as.numeric(rownames(sub.train[cooksd > 4*mean(cooksd, na.rm = T), ]))
print(outliers)
#cek outliers
#row data yg outlier
outliers <- as.numeric(rownames(c.train[cooksd > 4*mean(cooksd, na.rm = T), ]))
print(outliers)
1599 / nrow(c.train)
runApp()
#plots for numeric variables
#1. Data Train
num.train <- train[,tr.num]
corrplot(corr(num.train), method = "shade", type = "full", tl.col = "black", bg = "white", tl.srt = 45,
title = "Correlation Plot between Numeric Variables of Fraudulent Claim Dataset")
corrplot(cor(num.train), method = "shade", type = "full", tl.col = "black", bg = "white", tl.srt = 45,
title = "Correlation Plot between Numeric Variables of Fraudulent Claim Dataset")
corrplot(cor(num.train), method = "number", type = "full", tl.col = "black", bg = "white", tl.srt = 45,
title = "Correlation Plot between Numeric Variables of Fraudulent Claim Dataset")
?corrplot
tr.num
str(train)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
library(dplyr)
library(tidyr)
library(corrplot)
library(stringr)
library(ggplot2)
library(caret)
library(outliers)
library(reshape2)
library(lattice)
library(psych)
raw.train <- read.csv("data/training.csv", sep = ",", header = T)
raw.test <- read.csv("data/test_2021.csv", sep = ",", header = T)
#get mode function
getmode <- function(x){
u <- unique(x)
m <- u[which.max(tabulate(match(x, u)))]
return(m)
}
impute_convert <- function(dataset){
for(i in 1:ncol(dataset)){
len <- length(levels(factor(dataset[[i]])))
if(class(dataset[[i]]) == "character" || len <= 5){
#convert char ke factor
dataset[[i]] <- as.factor(dataset[[i]])
#kalau ada missing value
if(sum(is.na(dataset[[i]])) > 0){
na.cond <- which(is.na(dataset[[i]]))
na.rows <- as.numeric(rownames(dataset[na.cond,]))
dataset[na.rows,i] <- getmode(dataset[[i]])
}
} else { #data numeric
if(sum(is.na(dataset[[i]])) > 0){
na.cond <- which(is.na(dataset[[i]]))
na.rows <- as.numeric(rownames(dataset[na.cond,]))
dataset[na.rows,i] <- median(dataset[[i]], na.rm = T)
}
}
}
return(dataset)
}
train <- impute_convert(raw.train)
test <- impute_convert(raw.test)
#DATA PARTITION
#drop columns yg tidak diperlukan : zip_code, claim_date, claim_day_of_week
c.train <- subset(train, select = -c(zip_code, claim_date, claim_day_of_week))
c.test <- subset(test, select = -c(zip_code, claim_date, claim_day_of_week))
#c.train dipisah jadi train model & test model
#proporsi buat target 0 & 1 dibuat sama di train & test
tr.index <- createDataPartition(c.train$fraud, p = 0.7, list = F, times = 1)
tr.mdl <- c.train[tr.index,]
ts.mdl <- c.train[-tr.index,]
#Random Forest
library(MASS)
library(randomForest)
set.seed(123)
rf <- randomForest(fraud ~ ., data = tr.mdl)
plot(rf)
runApp()
runApp()
runApp()
shiny::runApp()
library(dplyr)
library(tidyr)
library(corrplot)
library(stringr)
library(ggplot2)
library(caret)
library(outliers)
library(reshape2)
library(lattice)
library(psych)
raw.train <- read.csv("data/training.csv", sep = ",", header = T)
raw.test <- read.csv("data/test_2021.csv", sep = ",", header = T)
str(raw.train)
str(raw.test)
#get mode function
getmode <- function(x){
u <- unique(x)
m <- u[which.max(tabulate(match(x, u)))]
return(m)
}
impute_convert <- function(dataset){
for(i in 1:ncol(dataset)){
len <- length(levels(factor(dataset[[i]])))
if(class(dataset[[i]]) == "character" || len <= 5){
#convert char ke factor
dataset[[i]] <- as.factor(dataset[[i]])
#kalau ada missing value
if(sum(is.na(dataset[[i]])) > 0){
na.cond <- which(is.na(dataset[[i]]))
na.rows <- as.numeric(rownames(dataset[na.cond,]))
dataset[na.rows,i] <- getmode(dataset[[i]])
}
} else { #data numeric
if(sum(is.na(dataset[[i]])) > 0){
na.cond <- which(is.na(dataset[[i]]))
na.rows <- as.numeric(rownames(dataset[na.cond,]))
dataset[na.rows,i] <- median(dataset[[i]], na.rm = T)
}
}
}
return(dataset)
}
train <- impute_convert(raw.train)
test <- impute_convert(raw.test)
#DATA PARTITION
#drop columns yg tidak diperlukan : zip_code, claim_date, claim_day_of_week
c.train <- subset(train, select = -c(zip_code, claim_date, claim_day_of_week))
c.test <- subset(test, select = -c(zip_code, claim_date, claim_day_of_week))
#c.train dipisah jadi train model & test model
#proporsi buat target 0 & 1 dibuat sama di train & test
tr.index <- createDataPartition(c.train$fraud, p = 0.7, list = F, times = 1)
tr.mdl <- c.train[tr.index,]
ts.mdl <- c.train[-tr.index,]
#Decision Tree (immune to multicollinearity)
library(party)
set.seed(123)
dt <- ctree(fraud ~ ., data = tr.mdl)
my.input <- c(14850,120,"F","0",75,37500,"0","0","Own","Highway",1,"0",50,"Broker",
"0",5000,5,"Compact",25000,"black",22000)
pred.dt.coba <- predict(dt, my.input)
my.input <- data.frame(14850,120,"F","0",75,37500,"0","0","Own","Highway",1,"0",50,"Broker",
"0",5000,5,"Compact",25000,"black",22000)
pred.dt.coba <- predict(dt, my.input)
my.input <- data.frame(Name = c("claim_number","age_of_driver","gender","marital_status","safty_rating","annual_income",
"high_education_ind","address_change_ind","living_status","accident_site","past_num_of_claims",
"witness_present_ind","liab_prct","channel","policy_report_filed_ind","claim_est_payout",
"age_of_vehicle","vehicle_category","vehicle_price","vehicle_color","vehicle_weight"),
Value = c(14850,120,"F","0",75,37500,"0","0","Own","Highway",1,"0",50,"Broker",
"0",5000,5,"Compact",25000,"black",22000))
fraud <- 0
my.input
fraud <- 0
df <- rbind(df, fraud)
df <- rbind(my.input, fraud)
df
my.input <- data.frame(Name = c("claim_number","age_of_driver","gender","marital_status","safty_rating","annual_income",
"high_education_ind","address_change_ind","living_status","accident_site","past_num_of_claims",
"witness_present_ind","liab_prct","channel","policy_report_filed_ind","claim_est_payout",
"age_of_vehicle","vehicle_category","vehicle_price","vehicle_color","vehicle_weight"),
Value = c(14850,120,"F","0",75,37500,"0","0","Own","Highway",1,"0",50,"Broker",
"0",5000,5,"Compact",25000,"black",22000))
df <- rbind(my.input, "fraud" = 0
)
df
my.input <- data.frame(Name = c("claim_number","age_of_driver","gender","marital_status","safty_rating","annual_income",
"high_education_ind","address_change_ind","living_status","accident_site","past_num_of_claims",
"witness_present_ind","liab_prct","channel","policy_report_filed_ind","claim_est_payout",
"age_of_vehicle","vehicle_category","vehicle_price","vehicle_color","vehicle_weight","fraud"),
Value = c(14850,120,"F","0",75,37500,"0","0","Own","Highway",1,"0",50,"Broker",
"0",5000,5,"Compact",25000,"black",22000,"0"))
my.input
my.input <- transpose(my.input)
my.input <- t(my.input)
my.input
my.input <- data.frame(Name = c("claim_number","age_of_driver","gender","marital_status","safty_rating","annual_income",
"high_education_ind","address_change_ind","living_status","accident_site","past_num_of_claims",
"witness_present_ind","liab_prct","channel","policy_report_filed_ind","claim_est_payout",
"age_of_vehicle","vehicle_category","vehicle_price","vehicle_color","vehicle_weight","fraud"),
Value = as.character(c(14850,120,"F","0",75,37500,"0","0","Own","Highway",1,"0",50,"Broker",
"0",5000,5,"Compact",25000,"black",22000,"0")))
my.input <- t(my.input)
my.input
write.table(my.input,"my_input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
tst <- read.csv("my_input.csv", sep=",", header = TRUE)
tst
tst <- impute_convert(tst)
str(tst)
tst <- read.csv("my_input.csv", sep=",", header = TRUE)
str(tst)
tst <- read.csv("my_input.csv", sep=",", header = TRUE)
Output <- data.frame(Prediction=predict(dt,tst), Result = ifelse(predict(dt,tst) == 0,"Not Fraud","Fraud"))
my.input <- data.frame(Name = c("claim_number","age_of_driver","gender","marital_status","safty_rating","annual_income",
"high_education_ind","address_change_ind","living_status","accident_site","past_num_of_claims",
"witness_present_ind","liab_prct","channel","policy_report_filed_ind","claim_est_payout",
"age_of_vehicle","vehicle_category","vehicle_price","vehicle_color","vehicle_weight","fraud"),
Value = c(14850,120,"F","0",75,37500,"0","0","Own","Highway",1,"0",50,"Broker",
"0",5000,5,"Compact",25000,"black",22000,"0"))
my.input <- t(my.input)
write.table(my.input,"my_input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
tst <- read.csv("my_input.csv", sep=",", header = TRUE)
str(tst)
my.input <- t(my.input)
str(my.input)
my.input <- data.frame("claim_number" = 14850,"age_of_driver" = 120,"gender" = "F","marital_status" = "0","safty_rating" = 75,
"annual_income" = 37500,"high_education_ind" = "0","address_change_ind" = "0","living_status" = "Own",
"accident_site" = "Highway","past_num_of_claims" = 1,"witness_present_ind" = "0" ,"liab_prct" = 50,
"channel" = "Broker","policy_report_filed_ind" = "0","claim_est_payout" = 5000,"age_of_vehicle" = 5,
"vehicle_category" = "Compact","vehicle_price" = 25000,"vehicle_color" = "black","vehicle_weight" = 22000)
my.input
output <- data.frame(Prediction=predict(dt,my.input), Result = ifelse(as.factor(predict(dt,my.input)) == "0","Not Fraud","Fraud"))
str(ts.mdl)
str(my.input)
my.input <- ifelse(class(my.input) == "character",as.factor(my.input))
my.input <- ifelse(class(my.input) == "character",as.factor(my.input),my.input)
str(my.input)
my.input <- data.frame("claim_number" = 14850,"age_of_driver" = 120,"gender" = "F","marital_status" = "0","safty_rating" = 75,
"annual_income" = 37500,"high_education_ind" = "0","address_change_ind" = "0","living_status" = "Own",
"accident_site" = "Highway","past_num_of_claims" = 1,"witness_present_ind" = "0" ,"liab_prct" = 50,
"channel" = "Broker","policy_report_filed_ind" = "0","claim_est_payout" = 5000,"age_of_vehicle" = 5,
"vehicle_category" = "Compact","vehicle_price" = 25000,"vehicle_color" = "black","vehicle_weight" = 22000)
for(i in 1:nrow(my.input)){
if(class(my.input[[i]]) == "character"){
my.input[[i]] <- as.factor(my.input[[i]])
}
}
output <- data.frame(Prediction=predict(dt,my.input), Result = ifelse(as.factor(predict(dt,my.input)) == "0","Not Fraud","Fraud"))
str(my.input)
my.input <- data.frame("claim_number" = 14850,"age_of_driver" = 120,"gender" = "F","marital_status" = "0","safty_rating" = 75,
"annual_income" = 37500,"high_education_ind" = "0","address_change_ind" = "0","living_status" = "Own",
"accident_site" = "Highway","past_num_of_claims" = 1,"witness_present_ind" = "0" ,"liab_prct" = 50,
"channel" = "Broker","policy_report_filed_ind" = "0","claim_est_payout" = 5000,"age_of_vehicle" = 5,
"vehicle_category" = "Compact","vehicle_price" = 25000,"vehicle_color" = "black","vehicle_weight" = 22000)
for(i in 1:ncol(my.input)){
if(class(my.input[[i]]) == "character"){
my.input[[i]] <- as.factor(my.input[[i]])
}
}
output <- data.frame(Prediction=predict(dt,my.input), Result = ifelse(as.factor(predict(dt,my.input)) == "0","Not Fraud","Fraud"))
str(my.input)
runApp()
runApp()
setwd("~/Vania/R Projects/R Shiny/Fraudulent Claim Classification")
runApp()
shiny::runApp()
shiny::runApp()
